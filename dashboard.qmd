---
title: "Latest Earthquakes in Croatia"
format: 
  dashboard: 
    logo: "images/logo.png"
    orientation: rows

---


```{r, echo=FALSE, include=FALSE,message=FALSE, load_packages}
library(tidyverse)
library(httr2)
library(leaflet)
library(gt)
library(viridisLite)

```



```{r, echo=FALSE, include=FALSE,message=FALSE, get_data}

# Get data from USGS
req <- request("https://earthquake.usgs.gov/fdsnws/event/1/query.geojson?starttime=1990-01-01%2000:00:00&maxlatitude=46.604&minlatitude=41.919&maxlongitude=19.512&minlongitude=13.469&minmagnitude=1&orderby=time") %>%
    req_method("GET")


resp <- req %>%
    req_perform() %>%
    resp_body_json()

```


```{r, clean_data}

# Create data frame
quakes_df <- data.frame(
    mag = unlist(lapply(resp$features, FUN = function(x) { x$properties$mag })),
    place = unlist(lapply(resp$features, FUN = function(x) { x$properties$place })),
    time = unlist(lapply(resp$features, FUN = function(x) { x$properties$time })),
    lon = unlist(lapply(resp$features, FUN = function(x) { x$geometry$coordinates[1] })),
    lat = unlist(lapply(resp$features, FUN = function(x) { x$geometry$coordinates[2] })),
    depth = unlist(lapply(resp$features, FUN = function(x) { x$geometry$coordinates[3] }))
)


# Clean and prepare data
quakes_df$time <- as.POSIXct(quakes_df$time / 1000, origin = "1970-01-01")
quakes_df <- quakes_df %>% 
    mutate(
        time_only = format(time, "%I:%M %p"),
        days_ago = today() - date(time),
        days_ago = case_when(
            days_ago == 0 ~ "Today",
            days_ago == 1 ~ "Yesterday",
            TRUE ~ paste0(days_ago, " days ago")
        ),
        date_only = as.Date(time)
    ) %>% 
    filter(str_detect(place, ", Croatia$")) %>%
    mutate(
        place = str_remove(place, ", Croatia$")
    )



```

```{r, summary}
# Hours since last earthquake
now_nz <- now(tzone = "CET")
last_24 <- quakes_df %>%  filter(time > (now_nz - hours(24)))
n_24 <- nrow(last_24)
hours_last <- round(difftime(now_nz, quakes_df$time[1], units = "hours"))

# Find the most recent earthquake
last_eq <- quakes_df %>%
    arrange(desc(time)) %>%
    slice(1)

# Extract magnitude of the last earthquake
last_eq_magnitude <- last_eq$mag

# Extract location of the last earthquake
last_eq_location <- last_eq$place

days_eq <- last_eq$days_ago


```

```{r, leaflet_map}
# Make a map

mag_pal <- colorBin(palette = rev(rocket(8)), domain = 1:8, bins = c(1:5, 8))

quake_map <- quakes_df |> 
    leaflet() |> 
    addCircleMarkers(
        color = ~ mag_pal(mag),
        stroke = FALSE,
        fillOpacity = 0.5,
        radius = ~ scales::rescale(sqrt(mag), c(1, 10)),
        label = ~ paste(
            "Date:", date_only, "<br/>",
            "Time:", time_only, "<br/>",
            "Magnitude:", round(mag, 2), "<br/>",
            "Depth:", depth, " km" ,"<br/>",
            "Location:", place
            
        ) |> map(html),
        labelOptions = c(textsize = "15px")) |> 
    addLegend(title = "Magnitude", colors = mag_pal(1:5), labels = c("1", "2", "3", "4", ">5")) %>% 
    addProviderTiles(providers$CartoDB.Positron, options = tileOptions(minZoom = 7, maxZoom = 10))


```



## Row {height="20%"}

```{r}
#| component: valuebox
#| title: Days since last earthquake
list(
  icon = "calendar-event",
  color = "white",
  value = days_eq
)
```


```{r}
#| component: valuebox
#| title: Earthquakes in the last 24 hours
list(
  icon = "clock",
  color = "white",
  value = n_24
)
```

```{r}
#| component: valuebox
#| title: Magnitude of the last earthquake
list(
  icon = "activity",
  color = "white",
  value = last_eq_magnitude
)
```

```{r}
#| component: valuebox
#| title: Location of the last earthquake
list(
  icon = "geo-alt-fill",
  color = "white",
  value = last_eq_location
)
```

## Row {height="15%"}

```{r, sendtoojs}
#| echo: false
#| include: false
ojs_define(top_n_ojs = quakes_df)
```


```{ojs}
//| title: Filter Data

// Tranpose the data to  make it usable in ojs
top_n_tbl = transpose(top_n_ojs)

parse = d3.utcParse("%Y-%m-%d %H:%M:%S %Z")
top_n_tblParsed= top_n_tbl.map((d) => ({time: parse(d.time)}))

viewof start_date = Inputs.date(
top_n_tblParsed.filter(d => d.time),
  {label: "Start Date:", 
  value: "2024-01-01",
  min: "2020-01-01",
  max: new Date().toISOString().split('T')[0] }
)

viewof end_date = Inputs.date(
top_n_tblParsed.filter(d => d.time),

  {label: "End Date:", 
  value: new Date().toISOString().split('T')[0] }
)

viewof mag = Inputs.range([1, 10],

  {label: "Magnitude:", 
  value: 1.1,
  step: 0.1 }
)

```




## Row 

### Column

```{r}
#| title: 20 Latest Earthquakes

# Create quakes table

quakes_df %>%
  select(date_only, time_only, mag, depth, place) %>%  
  gt(id = "custom") %>% 
  cols_label(
    date_only = "Date",
    time_only = "Time",
    mag = "Magnitude",
    depth = "Depth",
    place = "Location"
  ) %>% 
  fmt_integer(
    columns = depth, 
    pattern = "{x} km"
  ) |> 
  fmt_number(
    columns = mag,
    decimals = 1
  ) |> 
 tab_options(
    table.font.color = "#5A5555",
    table.background.color = "white",
    table.font.names = "Montserrat",
    table.font.size = px(14),
    footnotes.background.color = "#5A5555",
    source_notes.background.color = "#FAEBDDFF"
  ) |> 
   
  tab_source_note(
    source_note = md(paste("Retrieved from the [GeoNet API](https://api.geonet.org.nz/) at", format(now_nz, "%Y/%m/%d %H:%M %Z")))
  ) 

```


### Column

```{r}
#| title: 100 Latest Earthquakes
quake_map
```
